#include<Windows.h>
#include<tchar.h>
HBRUSH hbrush, h_brush[6];
TCHAR str[] = _T("сплошное заполнение");
LPCWSTR hstr[] = { _T("HS_BDIAGONAL - слева направо и снизу вверх"),
_T("HS_CROSS - горизонтальная и вертикальная штриховка"),
_T("HS_DIAGCROSS - под углом в 45 градусов"),
_T("HS_FDIAGONAL - слева направо и сврезу вниз"),
_T("HS_HORIZONTAL - горизонтальная штриховка"),
_T("HS_VERTICAL - вертикальная штриховка"), };
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

//==================================================================================
TCHAR WinName[] = _T("MainFrame");
int APIENTRY _tWinMain(HINSTANCE This, // Дескрипотор текущего приложения
	HINSTANCE Prev, // В современных системах всегда 0
	LPTSTR cmd, // Командная строка
	int mode) // Режим отображения окна
{
	HWND hWnd; // Дескриптор главного окна программы
	MSG msg; // Структура для хранения сообщения
	WNDCLASS wc; // Класс окна
	wc.hInstance = This; // Определение класса окна
	wc.lpszClassName = WinName; // Имя класса окна
	wc.lpfnWndProc = WndProc; // Функция окна
	wc.style = CS_HREDRAW | CS_VREDRAW; // Стиль окна
	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION); // Стандартная икона
	wc.hCursor = LoadCursor(NULL, IDC_ARROW); // Стандартный курсор
	wc.lpszMenuName = NULL; // Нет меню
	wc.cbClsExtra = 0; // Нет дополнительных данных класса
	wc.cbWndExtra = 0; // Нет дополнительных данных окна
	wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	if (!RegisterClass(&wc)) return 0; // Регистрация класса окна
	// Создание окна
	hWnd = CreateWindow(WinName, // Имя класса окна
		_T("Каркас приложения"), // Заголовок окна
		WS_OVERLAPPEDWINDOW, // Стиль окна
		CW_USEDEFAULT, // х
		CW_USEDEFAULT, // у
		CW_USEDEFAULT, // Width
		CW_USEDEFAULT, // Height
		HWND_DESKTOP, // Дескрипт приложения
		NULL, // Нет меню
		This, // Дескриптор приложения
		NULL); // Дополнительной информации нет
	ShowWindow(hWnd, mode); // Показать окно
	// Цикл обработки сообщений
	while (GetMessage(&msg, NULL, 0, 0)) {
		TranslateMessage(&msg); // Функция трансляции кодов нажатой клавиши
		DispatchMessage(&msg); // Посылает сообщения функции WndProc
	}
	return 0;
}


LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
	PAINTSTRUCT ps;
	HDC hdc;
	RECT rect;
	int i;
	int nIndex[] = { HS_BDIAGONAL, HS_CROSS, HS_DIAGCROSS, HS_FDIAGONAL, HS_HORIZONTAL, HS_VERTICAL };
	switch (uMsg) {
	case WM_CREATE:
		hbrush = CreateSolidBrush(RGB(255, 255, 0));
		for ( i = 0; i < 6; i++)
		{
			h_brush[i] = CreateHatchBrush(nIndex[i], RGB(0, 128, 0));
		}
		break;
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		SelectObject(hdc, hbrush);
		Ellipse(hdc, 1, 1, 40, 40);
		TextOut(hdc, 50, 11, str, _tcsclen(str));
		for ( i = 0; i < 6; i++)
		{
			SelectObject(hdc, h_brush[i]);
			Rectangle(hdc, 1, 41 + i * 40, 40, 80 + i * 40);
			TextOut(hdc, 50, 51 + i * 40, hstr[i], _tcsclen(hstr[i]));
		}
		EndPaint(hWnd, &ps);
		break;
	case WM_DESTROY:
		DeleteObject(hbrush);
		for (i = 0; i < 6; i++)
			DeleteObject(h_brush[i]);
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, uMsg, wParam, lParam);
	}
	return 0;

}
